services:
  server:
    build:
      context: .
      dockerfile: ./Dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.server.rule=(Host(`${HOST}`))
      - traefik.http.services.server.loadbalancer.server.port=80
    env_file:
      - .env
    environment:
      DB_HOST: db
      DB_PORT: 5432
    deploy:
      mode: replicas
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
    depends_on:
      reverse-proxy:
        condition: service_started
      db:
        condition: service_healthy

  db:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  reverse-proxy:
    image: traefik
    command:
      --api.insecure=true
      --providers.docker
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  db-data:
